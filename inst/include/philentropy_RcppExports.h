// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef __philentropy_RcppExports_h__
#define __philentropy_RcppExports_h__

#include <Rcpp.h>

namespace philentropy {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("philentropy", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("philentropy", "philentropy_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in philentropy");
            }
        }
    }

    inline Rcpp::NumericMatrix as_matrix(Rcpp::DataFrame x) {
        typedef SEXP(*Ptr_as_matrix)(SEXP);
        static Ptr_as_matrix p_as_matrix = NULL;
        if (p_as_matrix == NULL) {
            validateSignature("Rcpp::NumericMatrix(*as_matrix)(Rcpp::DataFrame)");
            p_as_matrix = (Ptr_as_matrix)R_GetCCallable("philentropy", "philentropy_as_matrix");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_as_matrix(Rcpp::wrap(x));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<Rcpp::NumericMatrix >(__result);
    }

    inline Rcpp::DataFrame as_data_frame(Rcpp::NumericMatrix mat) {
        typedef SEXP(*Ptr_as_data_frame)(SEXP);
        static Ptr_as_data_frame p_as_data_frame = NULL;
        if (p_as_data_frame == NULL) {
            validateSignature("Rcpp::DataFrame(*as_data_frame)(Rcpp::NumericMatrix)");
            p_as_data_frame = (Ptr_as_data_frame)R_GetCCallable("philentropy", "philentropy_as_data_frame");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_as_data_frame(Rcpp::wrap(mat));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<Rcpp::DataFrame >(__result);
    }

    inline double vectorSum(Rcpp::NumericVector x) {
        typedef SEXP(*Ptr_vectorSum)(SEXP);
        static Ptr_vectorSum p_vectorSum = NULL;
        if (p_vectorSum == NULL) {
            validateSignature("double(*vectorSum)(Rcpp::NumericVector)");
            p_vectorSum = (Ptr_vectorSum)R_GetCCallable("philentropy", "philentropy_vectorSum");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_vectorSum(Rcpp::wrap(x));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline SEXP sum2(SEXP x_) {
        typedef SEXP(*Ptr_sum2)(SEXP);
        static Ptr_sum2 p_sum2 = NULL;
        if (p_sum2 == NULL) {
            validateSignature("SEXP(*sum2)(SEXP)");
            p_sum2 = (Ptr_sum2)R_GetCCallable("philentropy", "philentropy_sum2");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_sum2(Rcpp::wrap(x_));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<SEXP >(__result);
    }

}

#endif // __philentropy_RcppExports_h__
